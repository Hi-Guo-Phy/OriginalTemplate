% mynotes.sty - 我的个人笔记样式文件


% 0. 文件标识
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{mynotes}[2025/10/06 My Personal Notes Style]


% 1. 引入依赖的宏包 
% 1.1. Times New Roman，正文、普通段落字体
\usepackage{newtxtext} 
\usepackage[T1]{fontenc}
% 1.2. 布局参数
\usepackage[a4paper, top=2.54cm, bottom=2.54cm, left=1.91cm, right=1.91cm]{geometry}
\usepackage{lipsum}   % 用于插入占位文本
\usepackage{abstract} % 用于更好地控制摘要环境
\usepackage{graphicx} % 插入图片的核心宏包
\usepackage{float}    % 支持 [H] 浮动选项
\usepackage{subcaption} % 用于实现多图并排，是 subfigure 的现代化替代品
% 1.3. 设置 1.5 倍行距
\RequirePackage{setspace}
\setstretch{1.5}
% 1.4. 公式环境
\usepackage{amsmath}   
\usepackage{amssymb}
\usepackage{arydshln} 
\usepackage{empheq}
% 1.5. 绘图环境
\usepackage{tikz} 
\usetikzlibrary{tikzmark}     % 用于在文本中创建 TikZ 节点
\usetikzlibrary{fit}          % 用于 \node[fit=...] 来创建包裹节点的方框
\usetikzlibrary{positioning}  % 用于 below=of 等语法
\usepackage{color}
\usetikzlibrary{arrows.meta}
\usetikzlibrary{positioning} 
\usetikzlibrary{shapes.geometric, calc, tikzmark} 
\usepackage{pgfplots}
\pgfplotsset{compat=1.18} % (或者 1.17, 1.16 等)
\usepgfplotslibrary{groupplots}
% 1.6. 为引用增加颜色
\usepackage{xcolor}  % 必须在 hyperref 之前加载
\definecolor{lightblue}{rgb}{0.2, 0.4, 0.8} % 调整RGB值来获得喜欢的蓝色
\usepackage{hyperref} % 加载超链接宏包
\hypersetup{
    colorlinks=true, % 将链接文字带颜色，而不是一个丑陋的方框
    linkcolor=blue,  % 内部链接的颜色 (公式, 图表, 章节)
    citecolor=green, % 文献引用的颜色 (这里用绿色做区分)
    urlcolor=cyan,   % 网址链接的颜色
    linkbordercolor={1 1 1}, % 可选：去除链接周围的边框 (如果 colorlinks=false)
}
\renewcommand{\eqref}[1]{\hyperref[#1]{\textup{\tagform@{\ref*{#1}}}}} % 加上圆括号
\usepackage{nameref} % 放到 hyperref 之后，可引用名字


% 2. 为封面页定义新的存储命令
\newcommand{\notetitle}[1]{\def\@notetitle{#1}}
\newcommand{\noteauthor}[1]{\def\@noteauthor{#1}}
\newcommand{\noteschool}[1]{\def\@noteschool{#1}}
\newcommand{\notecollaborator}[1]{\def\@notecollaborator{#1}}
\newcommand{\notecollabschool}[1]{\def\@notecollabschool{#1}}
\newcommand{\notedate}[1]{\def\@notedate{#1}}
\newcommand{\noteabstract}[1]{\def\@noteabstract{#1}}


% 3. 创建一个命令来生成封面页
\newcommand{\makenotetitle}{
    \begin{titlepage}
        \centering
        
        {\Huge \bfseries \@notetitle \par}
        \vspace{1.0cm}
        
        {\large \@noteauthor \par}
        {\normalsize \@noteschool \par}
        \vspace{1.0cm}
        
        {\large \textbf{Collaborator:} \par} % "Collaborator:" 文本硬编码在样式里
        {\large \@notecollaborator \par}
        {\normalsize \@notecollabschool \par}
        \vspace{1.0cm}
        
        {\large \@notedate \par}
        \vspace{1.0cm}
        
        \begin{abstract}
            \@noteabstract
        \end{abstract}
        
    \end{titlepage}
}


% 4. 自定义图片插入命令
    % 4.1. 单图插入命令 \insertsingleimage
    % 用法: \insertsingleimage{图片路径}{图片标题}{图片标签}
        \newcommand{\insertsingleimage}[3]{
            \begin{figure}[H]
                \centering
                \includegraphics[width=0.7\textwidth]{#1}
                \caption{#2}
                \label{#3}
            \end{figure}
        }
    % 4.2. 双图横排命令 \insertdoubleimage
    % 用法: \insertdoubleimage{图1路径}{图1标题}{图1标签}{图2路径}{图2标题}{图2标签}{总标题}{总标签}
        \newcommand{\insertdoubleimage}[8]{
            \begin{figure}[H]
                \centering
                % 第一个子图
                \begin{subfigure}[b]{0.48\textwidth}
                    \centering
                    \includegraphics[width=\textwidth]{#1}
                    \caption{#2}
                    \label{#3}
                \end{subfigure}
                \hfill % 水平间距
                % 第二个子图
                \begin{subfigure}[b]{0.48\textwidth}
                    \centering
                    \includegraphics[width=\textwidth]{#4}
                    \caption{#5}
                    \label{#6}
                \end{subfigure}
                \caption{#7}
                \label{#8}
            \end{figure}
        }


% 5. 自定义一个插入 TikZ 图像的命令
    % 用法: \inserttikzpicture{<tikz code>}{<caption text>}{<label name>}
    \newcommand{\inserttikzpicture}[3]{
        \begin{figure}[H]
            \centering
            \begin{tikzpicture}[
                scale=1.2,
                font=\small
            ]
                % 参数 #1: 用户输入的 TikZ 绘图代码会在这里展开
                #1
            \end{tikzpicture}
            \caption{#2} % 参数 #2: 图片标题
            \label{#3}   % 参数 #3: 图片标签
        \end{figure}
    }


% 6. 自定义表格插入命令
    % 用法: \inserttable{<列格式>}{<表格内容>}{<表格标题>}{<表格标签>}
    % <列格式>: 定义表格每一列的对齐方式，例如 {ccc} 表示三列居中，{l|r} 表示一列左对齐、一列右对齐，中间有竖线。
    % <表格内容>: 表格的主体，使用 & 分隔单元格，用 \\ 换行。例如: A & B & C \\ \hline D & E & F
    % <表格标题>: 显示在表格上方的标题文字。
    % <表格标签>: 用于在文中引用表格的标签，例如 tbl:data。
    \newcommand{\inserttable}[4]{
        \begin{table}[H] % 使用 [H] 选项让表格出现在代码所在的位置
            \centering   % 表格整体居中
            \caption{#3} % 设置表格标题
            \label{#4}   % 设置表格标签
            \begin{tabular}{#1} % #1 是用户传入的列格式
                \hline \hline % 表格顶部的双横线，更具学术风格
                % #2 是用户传入的表格内容
                #2 \\
                \hline \hline % 表格底部的双横线
            \end{tabular}
        \end{table}
    }

    
% 7. 自定义代码块插入命令，依赖 minted 宏包
\usepackage{minted}
\setminted{
    %style=monokai,       % 设置高亮风格 (monokai 是一个经典的深色主题)
    %bgcolor=bg,          % 设置背景颜色名称
    frame=single,         % 添加一个简单的边框
    framesep=2mm,        % 边框与代码的间距
    fontsize=\small,     % 代码字体大小
    % linenos,             % 显示行号
    breaklines,          % 自动折行
    tabsize=4,           % Tab 宽度
    python3=true         % 如果主要使用 Python 3，这是一个好习惯
}
% 定义一个深灰色背景，类似 VS Code
\definecolor{bg}{rgb}{0.16, 0.16, 0.18} 
% 自定义命令 
    % 从外部文件插入代码的命令 ---
    % 用法: \insertcodefromfile{<language>}{<filename>}{<caption text>}{<label name>}
    \newcommand{\insertcodefromfile}[4]{
        \begin{figure}[H]
            \centering
            \inputminted{#1}{#2}
            \caption{#3}
            \label{#4}
        \end{figure}
    }